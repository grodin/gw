#!/usr/bin/env bash

set -o nounset

# DEFAULTS may be overridden by calling environment.
GRADLEW="${GRADLEW:-gradlew}"

err() {
  echo -e "${@}" >&2
}

lookup() {
  local file="${1}"
  local curr_path="${2}"
  [[ -z "${curr_path}" ]] && curr_path="${PWD}"

  # Search recursively upwards for file.
  until [[ "${curr_path}" == "/" ]]; do
    if [[ -e "${curr_path}/${file}" ]]; then
      echo "${curr_path}/${file}"
      break
    else
      curr_path=$(dirname "${curr_path}")
    fi
  done
}

select_gradle() {
  local dir="${1}"

  # Use project's gradlew if found.
  local gradlew=$(lookup "${GRADLEW}" "${dir}")
  if [[ -z "${gradlew}" ]]; then
    err "No ${GRADLEW} set up for this project; consider setting one up:"
    err "http://gradle.org/docs/current/userguide/gradle_wrapper.html\n"
  else
    echo "${gradlew}"
    return 0
  fi
  return 1
}

execute_gradle() {
  local gradle=$(select_gradle "${PWD}")
  local gradle_dir="$(dirname ${gradle})" 

  # Say what we are gonna do, then do it.
  err "Using gradle wrapper in $gradle_dir"
  
  exec "${gradle}" "$@"
}

# gw may be sourced from other scripts as a library to select / run gradle(w).
if [[ ${BASH_SOURCE[0]} != $0 ]]; then
  export -f execute_gradle select_gradle lookup err
else
  set -e
  execute_gradle "$@"
  exit $?
fi
